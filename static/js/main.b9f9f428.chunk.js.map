{"version":3,"sources":["pages/home/Home.tsx","utils/chromakey.ts","components/VideoCapture.tsx","components/Instruction.tsx","pages/main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["THREEParticle","pX","pY","pZ","velocity","THREE","Home","elementRef","useRef","scene","camera","renderer","requestId","particleSystem","particles","sceneSetup","useCallback","width","current","clientWidth","height","clientHeight","position","z","setSize","appendChild","domElement","addCustomObjects","pMaterial","color","size","map","load","blending","transparent","depthTest","p","Math","random","particle","vertices","push","add","startAnimationLoop","rotation","x","y","pCount","verticesNeedUpdate","render","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","useEffect","addEventListener","removeEventListener","cancelAnimationFrame","ref","className","to","style","textDecoration","BLUE_HSV_RANGE","min","h","s","v","max","GREEN_HSV_RANGE","isInRange","value","calculateAlphaByHSV","r","g","b","frameHSV","rr","gg","bb","rabs","gabs","babs","diff","diffc","c","percentRoundFn","num","round","rgb2hsv","alpha","VideoCapture","forwardRef","videoElementRef","currentStep","setCurrentStep","selectedChromaColor","handleBack","video","videoProps","backgroundCanvasRef","outputCanvasRef","computeFrame","videoWidth","videoHeight","outputContext","getContext","drawImage","frame","getImageData","length","data","i","putImageData","updateFrame","err","console","log","captureBackground","backgroundContext","setAttribute","toDataURL","Provider","verticalAlign","onClick","autoPlay","display","Instruction","children","Main","useState","webcamAvailable","navigator","mediaDevices","getUserMedia","isWebcamBlocked","setIsWebcamBlocked","showInstructionIndex","setShowInstructionIndex","setSelectedChromaColor","alert","closeInstruction","ideal","then","stream","srcObject","catch","name","constraint","handleChromaColorSelected","disabled","App","basename","exact","path","Boolean","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"sYASMA,E,YAGJ,WAAYC,EAAYC,EAAYC,EAAYC,GAA0B,IAAD,8BACvE,4CAAMH,EAAIC,EAAIC,KAHhBC,cAEyE,EAEvE,EAAKA,SAAWA,EAFuD,E,2BAH/CC,KAoKbC,EA3JF,WACX,IAAMC,EAAaC,iBAAuB,MACpCC,EAAQD,mBACRE,EAASF,mBACTG,EAAWH,mBACXI,EAAYJ,mBACZK,EAAiBL,mBACjBM,EAAYN,mBAEZO,EAAaC,uBAAY,WAAO,IAAD,IAC7BC,GAAQ,UAAAV,EAAWW,eAAX,eAAoBC,cAAe,EAC3CC,GAAS,UAAAb,EAAWW,eAAX,eAAoBG,eAAgB,EAEnDZ,EAAMS,QAAU,IAAIb,IACpBK,EAAOQ,QAAU,IAAIb,IACnB,GACAY,EAAQG,EACR,GACA,KAGFV,EAAOQ,QAAQI,SAASC,EAAI,EAE5BZ,EAASO,QAAU,IAAIb,IACvBM,EAASO,QAAQM,QAAQP,EAAOG,GAC5Bb,EAAWW,SACbX,EAAWW,QAAQO,YAAYd,EAASO,QAAQQ,cAEjD,IAEGC,EAAmBX,uBAAY,WACnCF,EAAUI,QAAU,IAAIb,IAUxB,IATA,IAAMuB,EAAY,IAAIvB,IAAqB,CACzCwB,MAAO,SACPC,KAAM,EACNC,KAAK,IAAI1B,KAAsB2B,KAAK,gCACpCC,SAAU5B,IACV6B,aAAa,EACbC,WAAW,IAGJC,EAAI,EAAGA,EApDG,KAoDiBA,IAAK,CACvC,IAAMnC,EAAqB,IAAhBoC,KAAKC,SAAiB,IAC3BpC,EAAqB,IAAhBmC,KAAKC,SAAiB,IAC3BnC,EAAqB,IAAhBkC,KAAKC,SAAiB,IAE3BC,EAAW,IAAIvC,EACnBC,EACAC,EACAC,EACA,IAAIE,IACc,GAAhBgC,KAAKC,SAAiB,IACN,GAAhBD,KAAKC,SAAiB,IACN,GAAhBD,KAAKC,SAAiB,MAI1BxB,EAAUI,QAAQsB,SAASC,KAAKF,GAGlC1B,EAAeK,QAAU,IAAIb,IAAaS,EAAUI,QAASU,GAEzDnB,EAAMS,SACRT,EAAMS,QAAQwB,IAAI7B,EAAeK,WAElC,IAEGyB,EAAqB3B,uBAAY,WAAO,IAAD,IACrCC,GAAQ,UAAAV,EAAWW,eAAX,eAAoBC,cAAe,EAC3CC,GAAS,UAAAb,EAAWW,eAAX,eAAoBG,eAAgB,EAEnD,GAAIR,EAAeK,SAAWJ,EAAUI,QAAS,CAC/CL,EAAeK,QAAQ0B,SAASC,EAAI,KACpChC,EAAeK,QAAQ0B,SAASE,EAAI,KACpCjC,EAAeK,QAAQ0B,SAASrB,EAAI,KAEpC,IADA,IAAIwB,EAtFa,KAuFVA,KAAU,CAAC,IAAD,EACTR,EAAQ,UAAGzB,EAAUI,eAAb,aAAG,EAAmBsB,SAASO,GAEzCR,IACEA,EAASM,GAAK,IACfN,EAA2BnC,SAASyC,GAClC,EAAKN,EAA2BnC,SAASyC,GAC1CN,EAASO,GAAK,IACfP,EAA2BnC,SAAS0C,GAClC,EAAKP,EAA2BnC,SAAS0C,GAC1CP,EAAShB,IAAM,MAChBgB,EAA2BnC,SAASmB,GAClC,EAAKgB,EAA2BnC,SAASmB,GAC1CgB,EAASM,GAAK5B,IACfsB,EAA2BnC,SAASyC,GAClC,EAAKN,EAA2BnC,SAASyC,GAC1CN,EAASO,GAAK1B,IACfmB,EAA2BnC,SAAS0C,GAClC,EAAKP,EAA2BnC,SAAS0C,GAC1CP,EAAShB,GAAK,MACfgB,EAA2BnC,SAASmB,GAClC,EAAKgB,EAA2BnC,SAASmB,GAE9CgB,EAASM,GAAMN,EAA2BnC,SAASyC,EACnDN,EAASO,GAAMP,EAA2BnC,SAAS0C,EACnDP,EAAShB,GAAMgB,EAA2BnC,SAASmB,GAGvDT,EAAUI,QAAQ8B,oBAAqB,EAGrCrC,EAASO,SACXP,EAASO,QAAQ+B,OAAOxC,EAAMS,QAAUR,EAAOQ,SAEjDN,EAAUM,QAAUgC,OAAOC,sBAAsBR,KAChD,IAEGS,EAAqBpC,uBAAY,WAAO,IAAD,IACrCC,GAAQ,UAAAV,EAAWW,eAAX,eAAoBC,cAAe,EAC3CC,GAAS,UAAAb,EAAWW,eAAX,eAAoBG,eAAgB,EAE/CV,EAASO,SACXP,EAASO,QAAQM,QAAQP,EAAOG,GAE9BV,EAAOQ,UACTR,EAAOQ,QAAQmC,OAASpC,EAAQG,EAChCV,EAAOQ,QAAQoC,4BAEhB,IAgBH,OAdAC,qBAAU,WAMR,OALAxC,IACAY,IACAgB,IACAO,OAAOM,iBAAiB,SAAUJ,GAE3B,WACLF,OAAOO,oBAAoB,SAAUL,GACjCxC,EAAUM,SACZgC,OAAOQ,qBAAqB9C,EAAUM,YAGzC,CAACS,EAAkBZ,EAAY4B,EAAoBS,IAGpD,yBAAKO,IAAKpD,EAAYqD,UAAU,kBAC9B,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,SAAd,kBACiB,6BADjB,wBAKF,kBAAC,IAAD,CAAMC,GAAG,QAAQC,MAAO,CAAEC,eAAgB,SACxC,wBAAIH,UAAU,gBAAd,a,+BChHKI,G,MAAgC,CAC3CC,IAAK,CACHC,EAAG,IACHC,EAAG,GACHC,EAAG,IAELC,IAAK,CACHH,EAAG,IACHC,EAAG,IACHC,EAAG,OAIME,EAAiC,CAC5CL,IAAK,CACHC,EAAG,IACHC,EAAG,GACHC,EAAG,IAELC,IAAK,CACHH,EAAG,IACHC,EAAG,GACHC,EAAG,KAWDG,EAAY,SAACC,EAAeP,EAAaI,GAC7C,OAAOJ,GAAOO,GAASA,GAASH,GA0F3B,SAASI,EACdC,EACAC,EACAC,EACAjB,GAEA,IAAIkB,EAlDC,SAAiBH,EAAWC,EAAWC,GAC5C,IAAIE,EAAYC,EAAYC,EACtBC,EAAOP,EAAI,IACXQ,EAAOP,EAAI,IACXQ,EAAOP,EAAI,IAEbV,EAAI,EACJC,EAAI,EACFC,EAAI/B,KAAKgC,IAAIY,EAAMC,EAAMC,GACzBC,EAAOhB,EAAI/B,KAAK4B,IAAIgB,EAAMC,EAAMC,GAChCE,EAAQ,SAACC,GACb,OAAQlB,EAAIkB,GAAK,EAAIF,EAAO,IAExBG,EAAiB,SAACC,GAAD,OAAiBnD,KAAKoD,MAAY,IAAND,GAAa,KAwBhE,OAtBa,IAATJ,EACFlB,EAAIC,EAAI,GAERA,EAAIiB,EAAOhB,EACXU,EAAKO,EAAMJ,GACXF,EAAKM,EAAMH,GACXF,EAAKK,EAAMF,GAEPF,IAASb,EACXF,EAAIc,EAAKD,EACAG,IAASd,EAClBF,EAAI,EAAI,EAAIY,EAAKE,EACRG,IAASf,IAClBF,EAAI,EAAI,EAAIa,EAAKD,GAGfZ,EAAI,EACNA,GAAK,EACIA,EAAI,IACbA,GAAK,IAGF,CACLA,EAAG7B,KAAKoD,MAAU,IAAJvB,GACdC,EAAGoB,EAAmB,IAAJpB,GAClBC,EAAGmB,EAAmB,IAAJnB,IAULsB,CAAQhB,EAAGC,EAAGC,GACzBe,EAAQ,IASZ,OAJEpB,EAAUM,EAASX,EAAGP,EAAIM,IAAIC,EAAGP,EAAIU,IAAIH,KAEzCyB,EAAQ,GAEHA,ECpLT,IA4HeC,EA5HMC,sBACnB,WAQEC,GACI,IAPFC,EAOC,EAPDA,YACAC,EAMC,EANDA,eACAC,EAKC,EALDA,oBACAC,EAIC,EAJDA,WACcC,EAGb,EAHDC,WAAcD,MAIVE,EAAsB7F,iBAA0B,MAChD8F,EAAkB9F,iBAA0B,MAE5C+F,EAAevF,uBAAY,WAAO,IAAD,EACjCqF,EAAoBnF,SAAWoF,EAAgBpF,SAAWiF,IAC5DG,EAAgBpF,QAAQD,MAAQkF,EAAMK,WACtCF,EAAgBpF,QAAQE,OAAS+E,EAAMM,YACvCJ,EAAoBnF,QAAQD,MAAQkF,EAAMK,WAC1CH,EAAoBnF,QAAQE,OAAS+E,EAAMM,aAG7C,IAAMC,EAAa,UAAGJ,EAAgBpF,eAAnB,aAAG,EAAyByF,WAAW,MAC1D,GAAIR,GAASO,IACXA,EAAcE,UACZT,EACA,EACA,EACAA,EAAMK,WACNL,EAAMM,aAEY,IAAhBV,GAAmB,CASrB,IARA,IAAIc,EAAQH,EAAcI,aACxB,EACA,EACAX,EAAMK,WACNL,EAAMM,aAEJM,EAASF,EAAMG,KAAKD,OAAS,EAExBE,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/B,IAIMtB,EAAQlB,EAJNoC,EAAMG,KAAS,EAAJC,EAAQ,GACnBJ,EAAMG,KAAS,EAAJC,EAAQ,GACnBJ,EAAMG,KAAS,EAAJC,EAAQ,GAEgBhB,GAC3CY,EAAMG,KAAS,EAAJC,EAAQ,GAAKtB,EAE1Be,EAAcQ,aAAaL,EAAO,EAAG,MAGxC,CAACV,EAAOJ,EAAaE,IAElBkB,EAAcnG,uBAAY,WAC9B,IACEuF,IACA,MAAOa,GACPC,QAAQC,IAAIF,GAEd,IAAMxG,EAAYsC,OAAOC,sBAAsBgE,GAC/C,OAAO,WACLjE,OAAOQ,qBAAqB9C,MAE7B,CAAC2F,IAEJhD,qBAAU,WACR4D,MACC,CAACA,EAAahB,IAEjB,IAAMoB,EAAoBvG,uBAAY,WACpC,GAAIqF,EAAoBnF,SAAWoF,EAAgBpF,SAAWiF,EAAO,CACnE,IAAMqB,EAAoBnB,EAAoBnF,QAAQyF,WAAW,MAC7Da,IACFA,EAAkBZ,UAAUT,EAAO,EAAG,GACtCG,EAAgBpF,QAAQuG,aACtB,QADF,+BAE0BpB,EAAoBnF,QAAQwG,UAClD,cAHJ,WAQH,CAACvB,IAEJ,OACE,kBAAC,IAAYwB,SAAb,CACEnD,MAAO,CACLV,MAAO,CAAE8D,cAAe,UACxB9F,KAAM,WAGR,6BACE,4BAAQ8B,UAAU,cAAciE,QAAS3B,GACvC,kBAAC,IAAD,OAEF,2BACE4B,UAAQ,EACRnE,IAAKmC,EACLlC,UAAU,kBACVE,MAAO,CAAEiE,QAAS,UAEH,IAAhBhC,GACC,4BACEnC,UAAU,iBACViE,QAAS,WACP7B,EAAe,GACfuB,MAGF,kBAAC,IAAD,OAGJ,yBAAKzD,MAAO,CAAEiE,QAAS,UACrB,4BAAQnE,UAAU,eAAeD,IAAK2C,KAExC,yBAAKxC,MAAO,CAAEiE,QAAS,SACrB,4BAAQnE,UAAU,eAAeD,IAAK0C,UC3HnC2B,G,MAJe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/B,OAAO,yBAAKrE,UAAU,yBAAyBqE,KCUjD,IAkJeC,EAlJF,WAAO,IAAD,EACqBC,mBAAS,GAD9B,mBACVpC,EADU,KACGC,EADH,KAEXoC,KALIC,UAAUC,eAAgBD,UAAUC,aAAaC,cAMrDzC,EAAkBtF,iBAAyB,MAHhC,EAI6B2H,oBAAS,GAJtC,mBAIVK,EAJU,KAIOC,EAJP,OAKuCN,mBAAS,GALhD,mBAKVO,EALU,KAKYC,EALZ,OAOqCR,mBACpD7D,GARe,mBAOV2B,EAPU,KAOW2C,EAPX,KAWZR,GACHS,MACE,mGAIJ,IAAMC,EAAmB,WACvBH,EAAwB,IAOpBzC,EAAa,WACjBF,GAAe,SAAAD,GAAW,OAAKA,EAAc,EAAI,EAAI,EAAIA,EAAc,MAGzExC,qBAAU,WACR,GAAoB,IAAhBwC,EAAmB,CACrB4C,EAAwB,GAOxBN,UAAUC,aACPC,aAPiB,CAClBpC,MAAO,CACLlF,MAAO,CAAEgD,IAAK,IAAK8E,MAAO,MAC1B3H,OAAQ,CAAE6C,IAAK,IAAK8E,MAAO,QAK5BC,MAAK,SAAAC,GACAnD,EAAgB5E,UAClB4E,EAAgB5E,QAAQgI,UAAYD,MAGvCE,OAAM,SAAA/B,GACLyB,MAAM,yDAAD,OACsDzB,EAAIgC,KAD1D,aACmEhC,EAAIiC,aAE5EZ,GAAmB,WAEE,IAAhB1C,GACT4C,EAAwB,KAEzB,CAAC5C,IAEJ,IAAMuD,EAA4B,SAACzH,GAAD,OAA0B,WAC1D+G,EAAuB/G,GACvBmE,EAAe,GACf8C,MAGF,OACE,oCACmB,IAAhB/C,GACC,yBAAKnC,UAAU,kBACb,wBAAIA,UAAU,eAAd,wCACA,4BACE2F,UAAWnB,EACXxE,UAAU,cACViE,QAjDU,WAClB7B,EAAe,KA6CT,SASHwC,GACC,yBAAK5E,UAAU,kBACb,wBAAIA,UAAU,eAAd,wDAKF4E,GACA,6BAC4B,IAAzBE,GACC,kBAAC,EAAD,KACE,wBAAI9E,UAAU,eAAd,mCACkC,6BADlC,uDAIA,yBAAKE,MAAO,CAAEiE,QAAS,SACrB,4BACEnE,UAAU,cACViE,QAAS,WACP3B,IACA4C,MAJJ,QASA,4BAAQlF,UAAU,cAAciE,QAASiB,GAAzC,cAMoB,IAAzBJ,GACC,kBAAC,EAAD,KACE,wBAAI9E,UAAU,eAAd,gEAGA,yBAAKE,MAAO,CAAEiE,QAAS,SACrB,4BACEnE,UAAU,qBACViE,QAASyB,EAA0BhF,IAFrC,SAMA,4BACEV,UAAU,oBACViE,QAASyB,EAA0BtF,IAFrC,kBASW,IAAhB+B,GACC,kBAAC,EAAD,CACEG,WAAYA,EACZH,YAAaA,EACbC,eAAgBA,EAChBC,oBAAqBA,EACrBG,WAAY,CACVD,MAAOL,EAAgB5E,SAEzByC,IAAKmC,OCnIJ0D,EAfO,WACpB,OACE,kBAAC,IAAD,CAAQC,SAAS,2BACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,UCFUC,QACW,cAA7B1G,OAAO2G,SAASC,UAEe,UAA7B5G,OAAO2G,SAASC,UAEhB5G,OAAO2G,SAASC,SAASC,MACvB,2DCZNC,IAAS/G,OAAO,kBAAC,EAAD,MAASgH,SAASC,eAAe,SDmI3C,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.b9f9f428.chunk.js","sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\n\nimport \"./Home.scss\";\nimport { Link } from \"react-router-dom\";\n\nimport * as THREE from \"three\";\n\nconst PARTICLE_COUNT = 1500;\n\nclass THREEParticle extends THREE.Vector3 {\n  velocity: THREE.Vector3;\n\n  constructor(pX: number, pY: number, pZ: number, velocity: THREE.Vector3) {\n    super(pX, pY, pZ);\n    this.velocity = velocity;\n  }\n}\n\nconst Home = () => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const scene = useRef<THREE.Scene>();\n  const camera = useRef<THREE.PerspectiveCamera>();\n  const renderer = useRef<THREE.WebGLRenderer>();\n  const requestId = useRef<number>();\n  const particleSystem = useRef<THREE.Points>();\n  const particles = useRef<THREE.Geometry>();\n\n  const sceneSetup = useCallback(() => {\n    const width = elementRef.current?.clientWidth || 0;\n    const height = elementRef.current?.clientHeight || 0;\n\n    scene.current = new THREE.Scene();\n    camera.current = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000, // far plane\n    );\n\n    camera.current.position.z = 5;\n\n    renderer.current = new THREE.WebGLRenderer();\n    renderer.current.setSize(width, height);\n    if (elementRef.current) {\n      elementRef.current.appendChild(renderer.current.domElement);\n    }\n  }, []);\n\n  const addCustomObjects = useCallback(() => {\n    particles.current = new THREE.Geometry();\n    const pMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 3,\n      map: new THREE.TextureLoader().load(\"./images/glow-particle-1.png\"),\n      blending: THREE.AdditiveBlending,\n      transparent: true,\n      depthTest: false,\n    });\n\n    for (let p = 0; p < PARTICLE_COUNT; p++) {\n      const pX = Math.random() * 500 - 250;\n      const pY = Math.random() * 500 - 250;\n      const pZ = Math.random() * 500 - 250;\n\n      const particle = new THREEParticle(\n        pX,\n        pY,\n        pZ,\n        new THREE.Vector3(\n          Math.random() * 0.1 - 0.05,\n          Math.random() * 0.1 - 0.05,\n          Math.random() * 0.1 - 0.05,\n        ),\n      );\n\n      particles.current.vertices.push(particle);\n    }\n\n    particleSystem.current = new THREE.Points(particles.current, pMaterial);\n\n    if (scene.current) {\n      scene.current.add(particleSystem.current);\n    }\n  }, []);\n\n  const startAnimationLoop = useCallback(() => {\n    const width = elementRef.current?.clientWidth || 0;\n    const height = elementRef.current?.clientHeight || 0;\n\n    if (particleSystem.current && particles.current) {\n      particleSystem.current.rotation.x = 0.005;\n      particleSystem.current.rotation.y = 0.005;\n      particleSystem.current.rotation.z = 0.005;\n      let pCount = PARTICLE_COUNT;\n      while (pCount--) {\n        const particle = particles.current?.vertices[pCount];\n\n        if (particle) {\n          if (particle.x <= 0)\n            (particle as THREEParticle).velocity.x =\n              -1 * (particle as THREEParticle).velocity.x;\n          if (particle.y <= 0)\n            (particle as THREEParticle).velocity.y =\n              -1 * (particle as THREEParticle).velocity.y;\n          if (particle.z <= -100)\n            (particle as THREEParticle).velocity.z =\n              -1 * (particle as THREEParticle).velocity.z;\n          if (particle.x >= width)\n            (particle as THREEParticle).velocity.x =\n              -1 * (particle as THREEParticle).velocity.x;\n          if (particle.y >= height)\n            (particle as THREEParticle).velocity.y =\n              -1 * (particle as THREEParticle).velocity.y;\n          if (particle.z >= 100)\n            (particle as THREEParticle).velocity.z =\n              -1 * (particle as THREEParticle).velocity.z;\n\n          particle.x += (particle as THREEParticle).velocity.x;\n          particle.y += (particle as THREEParticle).velocity.y;\n          particle.z += (particle as THREEParticle).velocity.z;\n        }\n      }\n      particles.current.verticesNeedUpdate = true;\n    }\n\n    if (renderer.current) {\n      renderer.current.render(scene.current!, camera.current!);\n    }\n    requestId.current = window.requestAnimationFrame(startAnimationLoop);\n  }, []);\n\n  const handleWindowResize = useCallback(() => {\n    const width = elementRef.current?.clientWidth || 0;\n    const height = elementRef.current?.clientHeight || 0;\n\n    if (renderer.current) {\n      renderer.current.setSize(width, height);\n    }\n    if (camera.current) {\n      camera.current.aspect = width / height;\n      camera.current.updateProjectionMatrix();\n    }\n  }, []);\n\n  useEffect(() => {\n    sceneSetup();\n    addCustomObjects();\n    startAnimationLoop();\n    window.addEventListener(\"resize\", handleWindowResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n      if (requestId.current) {\n        window.cancelAnimationFrame(requestId.current);\n      }\n    };\n  }, [addCustomObjects, sceneSetup, startAnimationLoop, handleWindowResize]);\n\n  return (\n    <div ref={elementRef} className=\"home-container\">\n      <div className=\"title-container\">\n        <h1 className=\"title\">\n          Harry Potter's <br />\n          The Invisible Cloak\n        </h1>\n      </div>\n      <Link to=\"/main\" style={{ textDecoration: \"none\" }}>\n        <h3 className=\"animated-try\">Try it</h3>\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","export interface ColorRangeRGB {\n  min: {\n    r: number;\n    g: number;\n    b: number;\n  };\n  max: {\n    r: number;\n    g: number;\n    b: number;\n  };\n  tolerance: number;\n}\n\nexport interface ColorRangeHSV {\n  min: {\n    h: number;\n    s: number;\n    v: number;\n  };\n  max: {\n    h: number;\n    s: number;\n    v: number;\n  };\n}\n\nexport const BLUE_RGB_RANGE: ColorRangeRGB = {\n  max: {\n    r: 59,\n    g: 50,\n    b: 255,\n  },\n  min: {\n    r: 0,\n    g: 0,\n    b: 60,\n  },\n  tolerance: 0.02,\n};\n\nexport const GREEN_RGB_RANGE: ColorRangeRGB = {\n  max: {\n    r: 144, //59,\n    g: 255,\n    b: 167, //50,\n  },\n  min: {\n    r: 13,\n    g: 120, //80,\n    b: 13,\n  },\n  tolerance: 0.01,\n};\n\nexport const BLUE_HSV_RANGE: ColorRangeHSV = {\n  min: {\n    h: 220,\n    s: 50,\n    v: 50,\n  },\n  max: {\n    h: 270,\n    s: 100,\n    v: 100,\n  },\n};\n\nexport const GREEN_HSV_RANGE: ColorRangeHSV = {\n  min: {\n    h: 110,\n    s: 30,\n    v: 94,\n  },\n  max: {\n    h: 160,\n    s: 27,\n    v: 32,\n  },\n};\n\nconst calculateDistance = (c: number, min: number, max: number) => {\n  if (c < min) return min - c;\n  if (c > max) return c - max;\n\n  return 0;\n};\n\nconst isInRange = (value: number, min: number, max: number) => {\n  return min <= value && value <= max;\n};\n\nexport const calculateAlphaByDistance = (\n  r: number,\n  g: number,\n  b: number,\n  ref: ColorRangeRGB,\n) => {\n  let alpha = 255;\n  let difference =\n    calculateDistance(r, ref.min.r, ref.max.r) +\n    calculateDistance(g, ref.min.g, ref.max.g) +\n    calculateDistance(b, ref.min.b, ref.max.b);\n  difference /= 255 * 3;\n  if (difference < ref.tolerance) {\n    alpha = 0;\n  }\n  return alpha;\n};\n\nexport const calculateAlphaByRange = (\n  r: number,\n  g: number,\n  b: number,\n  ref: ColorRangeRGB,\n) => {\n  let alpha = 255;\n  if (\n    isInRange(r, ref.min.r, ref.max.r) &&\n    isInRange(g, ref.min.g, ref.max.g) &&\n    isInRange(b, ref.min.b, ref.max.b)\n  ) {\n    alpha = 0;\n  }\n  return alpha;\n};\n\nexport const calculateAlphaGreen = (r: number, g: number, b: number) => {\n  let alpha = 255;\n  if (r <= 80 && g >= 120 && b <= 40) {\n    alpha = 0;\n  }\n  return alpha;\n};\n\nexport function rgb2hsv(r: number, g: number, b: number) {\n  let rr: number, gg: number, bb: number;\n  const rabs = r / 255;\n  const gabs = g / 255;\n  const babs = b / 255;\n\n  let h = 0;\n  let s = 0;\n  const v = Math.max(rabs, gabs, babs);\n  const diff = v - Math.min(rabs, gabs, babs);\n  const diffc = (c: number) => {\n    return (v - c) / 6 / diff + 1 / 2;\n  };\n  const percentRoundFn = (num: number) => Math.round(num * 100) / 100;\n\n  if (diff === 0) {\n    h = s = 0;\n  } else {\n    s = diff / v;\n    rr = diffc(rabs);\n    gg = diffc(gabs);\n    bb = diffc(babs);\n\n    if (rabs === v) {\n      h = bb - gg;\n    } else if (gabs === v) {\n      h = 1 / 3 + rr - bb;\n    } else if (babs === v) {\n      h = 2 / 3 + gg - rr;\n    }\n\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n  return {\n    h: Math.round(h * 360),\n    s: percentRoundFn(s * 100),\n    v: percentRoundFn(v * 100),\n  };\n}\n\nexport function calculateAlphaByHSV(\n  r: number,\n  g: number,\n  b: number,\n  ref: ColorRangeHSV,\n) {\n  let frameHSV = rgb2hsv(r, g, b);\n  let alpha = 255;\n  if (\n    // isInRange(frameHSV.h, ref.min.h, ref.max.h) &&\n    // isInRange(frameHSV.s, ref.min.s, ref.max.s) &&\n    // isInRange(frameHSV.v, ref.min.v, ref.max.v)\n    isInRange(frameHSV.h, ref.min.h, ref.max.h)\n  ) {\n    alpha = 0;\n  }\n  return alpha;\n}\n","import React, { forwardRef, useRef, useCallback, useEffect } from \"react\";\nimport { FaCamera, FaArrowLeft } from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport \"./VideoCapture.scss\";\nimport { calculateAlphaByHSV, ColorRangeHSV } from \"../utils/chromakey\";\n\ninterface Props {\n  currentStep: number;\n  setCurrentStep: React.Dispatch<React.SetStateAction<number>>;\n  selectedChromaColor: ColorRangeHSV;\n  handleBack: () => void;\n  videoProps: {\n    video: HTMLVideoElement | null;\n  };\n}\nconst VideoCapture = forwardRef<HTMLVideoElement, Props>(\n  (\n    {\n      currentStep,\n      setCurrentStep,\n      selectedChromaColor,\n      handleBack,\n      videoProps: { video },\n    },\n    videoElementRef,\n  ) => {\n    const backgroundCanvasRef = useRef<HTMLCanvasElement>(null);\n    const outputCanvasRef = useRef<HTMLCanvasElement>(null);\n\n    const computeFrame = useCallback(() => {\n      if (backgroundCanvasRef.current && outputCanvasRef.current && video) {\n        outputCanvasRef.current.width = video.videoWidth;\n        outputCanvasRef.current.height = video.videoHeight;\n        backgroundCanvasRef.current.width = video.videoWidth;\n        backgroundCanvasRef.current.height = video.videoHeight;\n      }\n\n      const outputContext = outputCanvasRef.current?.getContext(\"2d\");\n      if (video && outputContext) {\n        outputContext.drawImage(\n          video,\n          0,\n          0,\n          video.videoWidth,\n          video.videoHeight,\n        );\n        if (currentStep === 3) {\n          let frame = outputContext.getImageData(\n            0,\n            0,\n            video.videoWidth,\n            video.videoHeight,\n          );\n          let length = frame.data.length / 4;\n\n          for (let i = 0; i < length; i++) {\n            let r = frame.data[i * 4 + 0];\n            let g = frame.data[i * 4 + 1];\n            let b = frame.data[i * 4 + 2];\n\n            const alpha = calculateAlphaByHSV(r, g, b, selectedChromaColor);\n            frame.data[i * 4 + 3] = alpha;\n          }\n          outputContext.putImageData(frame, 0, 0);\n        }\n      }\n    }, [video, currentStep, selectedChromaColor]);\n\n    const updateFrame = useCallback(() => {\n      try {\n        computeFrame();\n      } catch (err) {\n        console.log(err);\n      }\n      const requestId = window.requestAnimationFrame(updateFrame);\n      return () => {\n        window.cancelAnimationFrame(requestId);\n      };\n    }, [computeFrame]);\n\n    useEffect(() => {\n      updateFrame();\n    }, [updateFrame, video]);\n\n    const captureBackground = useCallback(() => {\n      if (backgroundCanvasRef.current && outputCanvasRef.current && video) {\n        const backgroundContext = backgroundCanvasRef.current.getContext(\"2d\");\n        if (backgroundContext) {\n          backgroundContext.drawImage(video, 0, 0);\n          outputCanvasRef.current.setAttribute(\n            \"style\",\n            `background-image:url(${backgroundCanvasRef.current.toDataURL(\n              \"image/webp\",\n            )});`,\n          );\n        }\n      }\n    }, [video]);\n\n    return (\n      <IconContext.Provider\n        value={{\n          style: { verticalAlign: \"middle\" },\n          size: \"1.3rem\",\n        }}\n      >\n        <div>\n          <button className=\"back-button\" onClick={handleBack}>\n            <FaArrowLeft />\n          </button>\n          <video\n            autoPlay\n            ref={videoElementRef}\n            className=\"video-container\"\n            style={{ display: \"none\" }}\n          ></video>\n          {currentStep === 1 && (\n            <button\n              className=\"capture-button\"\n              onClick={() => {\n                setCurrentStep(2);\n                captureBackground();\n              }}\n            >\n              <FaCamera />\n            </button>\n          )}\n          <div style={{ display: \"block\" }}>\n            <canvas className=\"video-canvas\" ref={outputCanvasRef}></canvas>\n          </div>\n          <div style={{ display: \"none\" }}>\n            <canvas className=\"video-canvas\" ref={backgroundCanvasRef}></canvas>\n          </div>\n        </div>\n      </IconContext.Provider>\n    );\n  },\n);\n\nexport default VideoCapture;\n","import React from \"react\";\n\nimport \"./Instruction.scss\";\n\nconst Instruction: React.FC = ({ children }) => {\n  return <div className=\"instruction-container\">{children}</div>;\n};\n\nexport default Instruction;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport \"./Main.scss\";\nimport VideoCapture from \"../../components/VideoCapture\";\nimport Instruction from \"../../components/Instruction\";\nimport {\n  GREEN_HSV_RANGE,\n  BLUE_HSV_RANGE,\n  ColorRangeHSV,\n} from \"../../utils/chromakey\";\n\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n}\n\nconst Main = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const webcamAvailable = hasGetUserMedia();\n  const videoElementRef = useRef<HTMLVideoElement>(null);\n  const [isWebcamBlocked, setIsWebcamBlocked] = useState(false);\n  const [showInstructionIndex, setShowInstructionIndex] = useState(0);\n\n  const [selectedChromaColor, setSelectedChromaColor] = useState<ColorRangeHSV>(\n    GREEN_HSV_RANGE,\n  );\n\n  if (!webcamAvailable) {\n    alert(\n      \"This browser does not support webcam, Please use other browsers instead (Chrome, Firefox, etc.)\",\n    );\n  }\n\n  const closeInstruction = () => {\n    setShowInstructionIndex(0);\n  };\n\n  const handleStart = () => {\n    setCurrentStep(1);\n  };\n\n  const handleBack = () => {\n    setCurrentStep(currentStep => (currentStep - 1 < 0 ? 0 : currentStep - 1));\n  };\n\n  useEffect(() => {\n    if (currentStep === 1) {\n      setShowInstructionIndex(1);\n      const constraints = {\n        video: {\n          width: { min: 640, ideal: 1280 },\n          height: { min: 480, ideal: 720 },\n        },\n      };\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then(stream => {\n          if (videoElementRef.current) {\n            videoElementRef.current.srcObject = stream;\n          }\n        })\n        .catch(err => {\n          alert(\n            `Your webcam does not meet the minimum requirements. \\n${err.name}: ${err.constraint}`,\n          );\n          setIsWebcamBlocked(true);\n        });\n    } else if (currentStep === 2) {\n      setShowInstructionIndex(2);\n    }\n  }, [currentStep]);\n\n  const handleChromaColorSelected = (color: ColorRangeHSV) => () => {\n    setSelectedChromaColor(color);\n    setCurrentStep(3);\n    closeInstruction();\n  };\n\n  return (\n    <>\n      {currentStep === 0 && (\n        <div className=\"main-container\">\n          <h3 className=\"first-label\">First, you have to open your webcam.</h3>\n          <button\n            disabled={!webcamAvailable}\n            className=\"open-button\"\n            onClick={handleStart}\n          >\n            Open\n          </button>\n        </div>\n      )}\n      {isWebcamBlocked && (\n        <div className=\"main-container\">\n          <h1 className=\"first-label\">\n            Please allow webcam access to use this application\n          </h1>\n        </div>\n      )}\n      {!isWebcamBlocked && (\n        <div>\n          {showInstructionIndex === 1 && (\n            <Instruction>\n              <h1 className=\"text-center\">\n                1. Capture the background scene <br />\n                (Don't move the camera after the image is captured)\n              </h1>\n              <div style={{ display: \"flex\" }}>\n                <button\n                  className=\"open-button\"\n                  onClick={() => {\n                    handleBack();\n                    closeInstruction();\n                  }}\n                >\n                  Back\n                </button>\n                <button className=\"open-button\" onClick={closeInstruction}>\n                  Got It !\n                </button>\n              </div>\n            </Instruction>\n          )}\n          {showInstructionIndex === 2 && (\n            <Instruction>\n              <h1 className=\"text-center\">\n                2. Choose one of the color to be your invisible cloak color.\n              </h1>\n              <div style={{ display: \"flex\" }}>\n                <button\n                  className=\"green-color-button\"\n                  onClick={handleChromaColorSelected(GREEN_HSV_RANGE)}\n                >\n                  GREEN\n                </button>\n                <button\n                  className=\"blue-color-button\"\n                  onClick={handleChromaColorSelected(BLUE_HSV_RANGE)}\n                >\n                  &nbsp;BLUE&nbsp;\n                </button>\n              </div>\n            </Instruction>\n          )}\n          {currentStep !== 0 && (\n            <VideoCapture\n              handleBack={handleBack}\n              currentStep={currentStep}\n              setCurrentStep={setCurrentStep}\n              selectedChromaColor={selectedChromaColor}\n              videoProps={{\n                video: videoElementRef.current,\n              }}\n              ref={videoElementRef}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/home/Home\";\nimport Main from \"./pages/main/Main\";\n\nconst App: React.FC = () => {\n  return (\n    <Router basename=\"/greenvisible-cloak-web\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/main\">\n          <Main />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}